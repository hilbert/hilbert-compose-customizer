#!/usr/bin/env python

# Taken from https://github.com/eywalker/nvidia-docker-compose.git (MIT)

import argparse
import json
import sys
import re
import os
import os.path
import errno
from os import listdir, walk
from os.path import isfile, isdir, join 
import stat
import grp

#import yaml
import ruamel.yaml as yaml
import ruamel.yaml.error
#from ruamel.yaml.error import UnsafeLoaderWarning
import warnings
warnings.simplefilter('ignore', ruamel.yaml.error.UnsafeLoaderWarning)


# support Python 2 or 3
if sys.version_info[0] == 3:
    from urllib.parse import urlparse, urlencode
    from urllib.request import urlopen, Request
    from urllib.error import HTTPError, URLError
    import urllib.request as request
    file_error = FileNotFoundError
else:
    from urlparse import urlparse
    from urllib import urlencode
    from urllib2 import urlopen, Request, HTTPError, URLError
    import urllib2 as request
    file_error = IOError

#def filehandle_if_exists_else_none(fname):
#    try:
#        return open(fname, 'r')
#    except file_error:
#        return None


parser = argparse.ArgumentParser()
#parser.add_argument('-f', '--file', metavar='INPUT_FILE', type=filehandle_if_exists_else_none,
#                    default='docker-compose.yml',
#                    help='Specify an alternate input compose file (default: docker-compose.yml)')
#parser.add_argument('-t', '--template', type=argparse.FileType('r'),
#                    help='Specify Jinja2 template file from which compose file will be generated. '
#                         '--template argument discards --file argument.')
parser.add_argument('-n', '--nvidia-docker-host', metavar='HOST[:PORT]', type=str, default='localhost:3476',
                    help='nvidia-docker-plugin daemon address to connect to (default: localhost:3476)')
parser.add_argument('-o', '--output', metavar='OUTPUT_FILE', type=argparse.FileType('w'),
                    default='docker-compose.override.yml',
                    help='Specify an alternate output compose file (default: docker-compose.override.yml)')
#parser.add_argument('-G', '--generate', action='store_true',
#                    help='Generate output compose file and exit, do not run docker-compose')
parser.add_argument('-s', '--services', type=str, default="base",
                    help='Service(s) to override. CSV. Default: "base"')
parser.add_argument('-v', '--formatversion', type=str, default="2.1",
                    help='Docker-Compose Format Version. Default: "2.1"')

(args, extras) = parser.parse_known_args()

gpu_devices = []
support_devices = []
_volumes = None

# NOTE: check /dev/dri/* for devices with group==video!
_dri_path = '/dev/dri'
if isdir(_dri_path):
    _video_grp_id = grp.getgrnam('video').gr_gid
    for _f in listdir(_dri_path):
        _ff = join(_dri_path, _f)
        _s = os.stat(_ff)
        if  (_s.st_gid == _video_grp_id) and (stat.S_ISBLK(_s.st_mode) or stat.S_ISCHR(_s.st_mode)):
            support_devices.append(_ff)

HILBERT_CUSTOMIZATIONS = os.environ.get("HILBERT_CUSTOMIZATIONS","nv").split(" ")

if "nv" in HILBERT_CUSTOMIZATIONS:
    try:
        req = Request('http://{0}/docker/cli/json'.format(args.nvidia_docker_host))
        req = urlopen(req)
        resp = req.read().decode()
        cuda_config = json.loads(resp)

        #    print(cuda_config)
        GPU_DEVICE_PATTERN = re.compile(r'/dev/nvidia\d+')

        for dev in cuda_config['Devices']:
            if GPU_DEVICE_PATTERN.match(dev):
                gpu_devices.append(dev)
            else:
                support_devices.append(dev)

        # Workaround due to 
        NVIDIA_MODESET = "/dev/nvidia-modeset"
        if NVIDIA_MODESET not in cuda_config['Devices']:
            if os.path.exists(NVIDIA_MODESET):
                support_devices.append(NVIDIA_MODESET)

        gpu_devices.sort()

        _volumes = cuda_config['Volumes']
    except URLError as e:
        if hasattr(e, 'reason'):
            if not( hasattr(e.reason, 'errno') and (e.reason.errno == errno.ECONNREFUSED) ):
                print('Note: We failed to reach the NVidia-Docker plugin. Reason: ', e.reason)
#            else:
#                print('Note: No connection to the NVidia-Docker plugin!') # OK: no Nvidia-Docker-Plugin installed!!!

        elif hasattr(e, 'code'):
            print('Note: NVidia-Docker pluging couldn\'t fulfill the request. Error code: ', e.code)


n_gpu = len(gpu_devices)

config = yaml.load("version: '{}'".format(args.formatversion))

#if args.template is not None:
#    from jinja2 import Template
#    content = Template(args.template.read()).render(N_GPU=n_gpu, GPU_DEVICES=gpu_devices) #!
#    config = yaml.load(content)
#else:
#    config = yaml.load(args.file)

if config is None:
    raise RuntimeError('Compose file is empty')

if _volumes is not None:
    _volume = _volumes[0].split(':')[0]
    volumes = config.setdefault('volumes', {})
    volumes[_volume] = {'external': True}

# TODO: extend config!!!
#from compose.config import main as compose_main


services = config.setdefault('services', {})

if services is None:
    services = {}

_services = args.services.split(",")

SERVICE_PATTERN = re.compile(r'^[_A-Za-z][_a-zA-Z0-9]*$')

#print(_volumes)
#print(_services)
#print(gpu_devices)
#print(support_devices)

for i in _services:
    s = i.strip()
    if not SERVICE_PATTERN.match(s):
        print("Warning: bad service name: '{}'. Skipping...".format(i))
        continue

    if ((len(gpu_devices) + len(support_devices)) > 0) or (_volumes is not None):
        sconf = services.setdefault(s, {})
        if _volumes is not None:
            sconf.setdefault('volumes', []).extend(_volumes)

        if (len(gpu_devices) + len(support_devices)) > 0:
            devices = sconf.setdefault('devices', [])
            if not any(gdev in devices for gdev in gpu_devices):
                devices.extend(gpu_devices)
            devices.extend(support_devices)
        services[s] = sconf

config['services'] = services

# print(config)

yaml.safe_dump(config, args.output, default_flow_style=False)

#if not args.generate:
#    from compose.cli.main import main as compose_main
#    sys.argv[:] = ['docker-compose', '-f', args.output.name] + extras
#    compose_main()
